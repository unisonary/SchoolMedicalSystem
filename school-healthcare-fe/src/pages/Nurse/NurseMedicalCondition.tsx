import { useState } from "react";
import axios from "@/api/axiosInstance";
import { toast } from "react-toastify";
import { Search, User, AlertCircle, Heart, FileText, Calendar, Phone } from "lucide-react";

// Interface cho k·∫øt qu·∫£ t√¨m ki·∫øm h·ªçc sinh
interface StudentSearchResult {
  studentId: number;
  name: string;
  parentName: string;
  parentPhone: string;
  className: string;
}

// Interface cho th√¥ng tin b·ªánh l√Ω
interface MedicalCondition {
  conditionId: number;
  conditionType: string;
  conditionName: string;
  severity: string;
  description: string;
  studentId: number;
  studentName: string;
}

const NurseMedicalCondition = () => {
  const [studentName, setStudentName] = useState<string>("");
  const [searchResults, setSearchResults] = useState<StudentSearchResult[]>([]);
  const [showDropdown, setShowDropdown] = useState(false);
  const [selectedStudent, setSelectedStudent] = useState<StudentSearchResult | null>(null);
  const [medicalConditions, setMedicalConditions] = useState<MedicalCondition[]>([]);
  const [loading, setLoading] = useState(false);
  const [searching, setSearching] = useState(false);

  // T√¨m ki·∫øm h·ªçc sinh theo t√™n
  const handleStudentSearch = async (keyword: string) => {
    setStudentName(keyword);
    
    if (keyword.length < 2) {
      setSearchResults([]);
      setShowDropdown(false);
      return;
    }

    setSearching(true);
    try {
      const res = await axios.get(`/student/search?name=${encodeURIComponent(keyword)}`);
      setSearchResults(res.data);
      setShowDropdown(true);
    } catch (error) {
      toast.error("L·ªói khi t√¨m ki·∫øm h·ªçc sinh.");
      setSearchResults([]);
    } finally {
      setSearching(false);
    }
  };

  // Ch·ªçn h·ªçc sinh v√† l·∫•y th√¥ng tin b·ªánh l√Ω
  const handleSelectStudent = async (student: StudentSearchResult) => {
    setSelectedStudent(student);
    setStudentName(student.name);
    setShowDropdown(false);
    setMedicalConditions([]);
    
    setLoading(true);
    try {
      const res = await axios.get(`/nurse/medical-condition/${student.studentId}`);
      setMedicalConditions(res.data);
      
      if (res.data.length === 0) {
        toast.info(`H·ªçc sinh ${student.name} kh√¥ng c√≥ b·ªánh l√Ω n√†o ƒë∆∞·ª£c ghi nh·∫≠n.`);
      } else {
        toast.success(`T√¨m th·∫•y ${res.data.length} b·ªánh l√Ω c·ªßa h·ªçc sinh ${student.name}.`);
      }
    } catch (error: any) {
      toast.error(error?.response?.data?.message || "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin b·ªánh l√Ω.");
    } finally {
      setLoading(false);
    }
  };

  // L·∫•y m√†u s·∫Øc theo m·ª©c ƒë·ªô nghi√™m tr·ªçng
  const getSeverityColor = (severity: string) => {
    switch (severity?.toLowerCase()) {
      case "nh·∫π":
        return "bg-green-100 text-green-800 border-green-200";
      case "trung b√¨nh":
        return "bg-yellow-100 text-yellow-800 border-yellow-200";
      case "n·∫∑ng":
        return "bg-orange-100 text-orange-800 border-orange-200";
      case "nguy k·ªãch":
        return "bg-red-100 text-red-800 border-red-200";
      default:
        return "bg-gray-100 text-gray-800 border-gray-200";
    }
  };

  // L·∫•y icon theo lo·∫°i b·ªánh l√Ω
  const getConditionTypeIcon = (conditionType: string) => {
    switch (conditionType) {
      case "D·ªã ·ª©ng":
        return <AlertCircle className="w-5 h-5 text-red-500" />;
      case "B·ªánh tim":
        return <Heart className="w-5 h-5 text-red-500" />;
      case "B·ªánh m√£n t√≠nh":
        return <Calendar className="w-5 h-5 text-blue-500" />;
      default:
        return <FileText className="w-5 h-5 text-gray-500" />;
    }
  };

  // Reset form
  const handleReset = () => {
    setStudentName("");
    setSelectedStudent(null);
    setMedicalConditions([]);
    setSearchResults([]);
    setShowDropdown(false);
  };

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold text-gray-800 mb-2">ü©∫ Tra c·ª©u b·ªánh l√Ω h·ªçc sinh</h2>
        <p className="text-gray-600">T√¨m ki·∫øm v√† xem th√¥ng tin b·ªánh l√Ω c·ªßa h·ªçc sinh</p>
      </div>

      {/* Search Section */}
      <div className="bg-white rounded-xl border border-gray-200 p-6 shadow-lg">
        <div className="flex items-center space-x-3 mb-4">
          <Search className="w-6 h-6 text-blue-500" />
          <h3 className="text-xl font-semibold text-gray-800">T√¨m ki·∫øm h·ªçc sinh</h3>
        </div>

        <div className="relative">
          <div className="flex space-x-3">
            <div className="flex-1 relative">
              <input
                type="text"
                placeholder="Nh·∫≠p t√™n h·ªçc sinh ƒë·ªÉ t√¨m ki·∫øm..."
                className="w-full p-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all"
                value={studentName}
                onChange={(e) => handleStudentSearch(e.target.value)}
              />
              
              {searching && (
                <div className="absolute right-3 top-3">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-500"></div>
                </div>
              )}

              {/* Dropdown k·∫øt qu·∫£ t√¨m ki·∫øm */}
              {showDropdown && searchResults.length > 0 && (
                <div className="absolute z-10 bg-white border border-gray-200 rounded-lg shadow-xl mt-1 w-full max-h-60 overflow-auto">
                  {searchResults.map((student) => (
                    <div
                      key={student.studentId}
                      onClick={() => handleSelectStudent(student)}
                      className="p-3 hover:bg-blue-50 cursor-pointer transition-colors border-b border-gray-100 last:border-b-0"
                    >
                      <div className="flex items-center space-x-3">
                        <div className="w-10 h-10 bg-gradient-to-r from-blue-400 to-green-400 rounded-full flex items-center justify-center text-white font-bold">
                          {student.name.charAt(0)}
                        </div>
                        <div className="flex-1">
                          <div className="font-medium text-gray-800">{student.name}</div>
                          <div className="text-sm text-gray-500">
                            L·ªõp: {student.className} ‚Ä¢ PH: {student.parentName}
                          </div>
                          <div className="text-xs text-gray-400 flex items-center space-x-1">
                            <Phone className="w-3 h-3" />
                            <span>{student.parentPhone}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>

            <button
              onClick={handleReset}
              className="px-6 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors"
            >
              L√†m m·ªõi
            </button>
          </div>
        </div>
      </div>

      {/* Selected Student Info */}
      {selectedStudent && (
        <div className="bg-gradient-to-r from-blue-50 to-green-50 rounded-xl border border-blue-200 p-6">
          <div className="flex items-center space-x-4">
            <div className="w-16 h-16 bg-gradient-to-r from-blue-400 to-green-400 rounded-full flex items-center justify-center text-white text-xl font-bold">
              {selectedStudent.name.charAt(0)}
            </div>
            <div>
              <h3 className="text-xl font-bold text-gray-800">{selectedStudent.name}</h3>
              <div className="text-sm text-gray-600 space-y-1">
                <div>L·ªõp: <span className="font-medium">{selectedStudent.className}</span></div>
                <div>Ph·ª• huynh: <span className="font-medium">{selectedStudent.parentName}</span></div>
                <div className="flex items-center space-x-1">
                  <Phone className="w-4 h-4" />
                  <span>{selectedStudent.parentPhone}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Medical Conditions */}
      {selectedStudent && (
        <div className="bg-white rounded-xl border border-gray-200 shadow-lg">
          <div className="bg-gradient-to-r from-gray-50 to-gray-100 px-6 py-4 border-b flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <FileText className="w-6 h-6 text-blue-500" />
              <h3 className="text-xl font-semibold text-gray-800">Th√¥ng tin b·ªánh l√Ω</h3>
              <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
                {medicalConditions.length} b·ªánh l√Ω
              </span>
            </div>
          </div>

          <div className="p-6">
            {loading ? (
              <div className="text-center py-12">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
                <p className="text-gray-500">ƒêang t·∫£i th√¥ng tin b·ªánh l√Ω...</p>
              </div>
            ) : medicalConditions.length === 0 ? (
              <div className="text-center py-12">
                <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Heart className="w-8 h-8 text-green-500" />
                </div>
                <p className="text-gray-500 text-lg">Kh√¥ng c√≥ b·ªánh l√Ω n√†o ƒë∆∞·ª£c ghi nh·∫≠n</p>
                <p className="text-gray-400 text-sm mt-2">
                  H·ªçc sinh {selectedStudent.name} hi·ªán t·∫°i kh√¥ng c√≥ b·ªánh l√Ω n√†o trong h·ªá th·ªëng
                </p>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {medicalConditions.map((condition) => (
                  <div
                    key={condition.conditionId}
                    className="bg-gradient-to-br from-white to-gray-50 border border-gray-200 rounded-xl p-6 hover:shadow-md transition-shadow"
                  >
                    <div className="flex items-start space-x-3 mb-4">
                      {getConditionTypeIcon(condition.conditionType)}
                      <div className="flex-1">
                        <h4 className="text-lg font-semibold text-gray-800 mb-1">
                          {condition.conditionName}
                        </h4>
                        <div className="flex items-center space-x-2 mb-2">
                          <span className="text-sm text-gray-600 bg-gray-100 px-2 py-1 rounded">
                            {condition.conditionType}
                          </span>
                          <span className={`text-sm px-2 py-1 rounded border ${getSeverityColor(condition.severity)}`}>
                            {condition.severity}
                          </span>
                        </div>
                      </div>
                    </div>

                    <div className="space-y-3">
                      <div>
                        <label className="text-sm font-medium text-gray-700 block mb-1">
                          M√¥ t·∫£ chi ti·∫øt:
                        </label>
                        <p className="text-sm text-gray-600 bg-gray-50 p-3 rounded-lg">
                          {condition.description || "Kh√¥ng c√≥ m√¥ t·∫£ chi ti·∫øt"}
                        </p>
                      </div>

                      <div className="text-xs text-gray-500 bg-blue-50 p-2 rounded">
                        <span className="font-medium">M√£ b·ªánh l√Ω:</span> #{condition.conditionId}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )}

      {/* Instructions */}
      {!selectedStudent && (
        <div className="bg-blue-50 border border-blue-200 rounded-xl p-6">
          <div className="flex items-start space-x-3">
            <User className="w-6 h-6 text-blue-600 mt-1" />
            <div>
              <h4 className="text-lg font-semibold text-blue-800 mb-2">H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</h4>
              <ul className="text-sm text-blue-700 space-y-1">
                <li>‚Ä¢ Nh·∫≠p t√™n h·ªçc sinh v√†o √¥ t√¨m ki·∫øm (t·ªëi thi·ªÉu 2 k√Ω t·ª±)</li>
                <li>‚Ä¢ Ch·ªçn h·ªçc sinh t·ª´ danh s√°ch k·∫øt qu·∫£</li>
                <li>‚Ä¢ H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông hi·ªÉn th·ªã th√¥ng tin b·ªánh l√Ω c·ªßa h·ªçc sinh</li>
                <li>‚Ä¢ S·ª≠ d·ª•ng n√∫t "L√†m m·ªõi" ƒë·ªÉ t√¨m ki·∫øm h·ªçc sinh kh√°c</li>
              </ul>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default NurseMedicalCondition;